"use strict";(self.webpackChunkdebugger_restarts_clj=self.webpackChunkdebugger_restarts_clj||[]).push([[149],{149:(e,t,s)=>{s.r(t),s.d(t,{default:()=>m});var r=s(177),a=s(901);class n{constructor(){this._restarts=[],this._threadId=1,this._changed=new a.Signal(this),this._clicked=new a.Signal(this)}get changed(){return this._changed}get clicked(){return this._clicked}get restarts(){return this._restarts}set restarts(e){this._restarts=e,this._changed.emit(e)}get threadId(){return this._threadId}set threadId(e){this._threadId=e}}var c=s(833),d=s(35),i=s(29),l=s.n(i);class o extends c.ReactWidget{constructor(e){super(),this._model=e,this.addClass("jp-DebuggerRestarts-body")}render(){return l().createElement(g,{model:this._model})}}const g=({model:e})=>{const[t,s]=(0,i.useState)(Array.from(e.restarts));return(0,i.useEffect)((()=>{const t=(t,r)=>{s(Array.from(e.restarts))};return e.changed.connect(t),()=>{e.changed.disconnect(t)}})),l().createElement("table",{className:"jp-DebuggerRestarts-list"},l().createElement("tbody",null,t.map(((t,s)=>l().createElement(h,{key:s,index:s,restart:t,model:e})))))},h=({index:e,restart:t,model:s})=>l().createElement("tr",{className:"jp-DebuggerRestart",onClick:()=>s.clicked.emit(e),title:t.text},l().createElement("td",{className:"jp-DebuggerRestart-name"},t.name),l().createElement("td",{className:"jp-DebuggerRestart-text"},t.text));class u extends d.PanelWithToolbar{constructor(e){super(e),this.title.label="Restarts";const{model:t}=e,s=new o(t);this.addWidget(s),this.addClass("jp-DebuggerRestarts")}}const m={id:"debugger-restarts-clj:plugin",autoStart:!0,requires:[r.IDebugger,r.IDebuggerSidebar],activate:(e,t,s)=>{console.log("debugger-restarts-clj activated.");let r=new n,a=new u({model:r});r.clicked.connect(((e,s)=>{var r;t.session&&t.session.sendRequest("continue",{threadId:e.threadId,restart:s,frameId:null===(r=t.model.callstack.frame)||void 0===r?void 0:r.id})})),t.eventMessage.connect(((e,t)=>{switch(t.event){case"stopped":r.threadId=t.body.threadId,r.restarts=t.body.restarts||[];break;case"continued":case"initialized":case"terminated":r.restarts=[]}})),t.sessionChanged.connect(((e,t)=>{r.restarts=[],t&&t.connection&&(t.connection.kernelChanged.connect(((e,t)=>{r.restarts=[]})),t.connection.statusChanged.connect(((e,t)=>{"restarting"===t&&(r.restarts=[])})))})),s.insertWidget(2,a)}}}}]);